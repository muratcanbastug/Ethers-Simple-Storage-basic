const ethers = require("ethers");
const fs = require("fs-extra");
require("dotenv").config();

async function main() {
  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);
  // const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
  const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8");
  let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    encryptedJson,
    process.env.PRIVATE_KEY_PASSWORD
  );
  wallet = await wallet.connect(provider);
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  );
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
  const contract = await contractFactory.deploy();
  /* const transactionReceipt = */ await contract.deployTransaction.wait();
  console.log(`Contract Address: ${contract.address}`);
  // wait(1) aradan bir blok geçmesini sağlar. Bizim örneğimizde tek transaction gönderen biz olduğumuz için
  // 1 blok geçmesi işlemlerimizin tamamlanması anlamına gelir. Normalde .wait() kullanılır.

  /*   const nonce = await wallet.getTransactionCount();
  const tx = {
    nonce: nonce,
    gasPrice: 20000000000,
    gasLimit: 1000000,
    to: null,
    value: 0,
    data: "0x608060405234801561001057600080fd5b50610489806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632e64cec1146100515780636057361d1461006f5780636f760f411461008b5780638bab8dd5146100a7575b600080fd5b6100596100d7565b6040516100669190610158565b60405180910390f35b610089600480360381019061008491906101b3565b6100e0565b005b6100a560048036038101906100a09190610326565b6100ea565b005b6100c160048036038101906100bc9190610382565b610111565b6040516100ce9190610158565b60405180910390f35b60008054905090565b8060008190555050565b806001836040516100fb919061043c565b9081526020016040518091039020819055505050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000819050919050565b6101528161013f565b82525050565b600060208201905061016d6000830184610149565b92915050565b6000604051905090565b600080fd5b600080fd5b6101908161013f565b811461019b57600080fd5b50565b6000813590506101ad81610187565b92915050565b6000602082840312156101c9576101c861017d565b5b60006101d78482850161019e565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610233826101ea565b810181811067ffffffffffffffff82111715610252576102516101fb565b5b80604052505050565b6000610265610173565b9050610271828261022a565b919050565b600067ffffffffffffffff821115610291576102906101fb565b5b61029a826101ea565b9050602081019050919050565b82818337600083830152505050565b60006102c96102c484610276565b61025b565b9050828152602081018484840111156102e5576102e46101e5565b5b6102f08482856102a7565b509392505050565b600082601f83011261030d5761030c6101e0565b5b813561031d8482602086016102b6565b91505092915050565b6000806040838503121561033d5761033c61017d565b5b600083013567ffffffffffffffff81111561035b5761035a610182565b5b610367858286016102f8565b92505060206103788582860161019e565b9150509250929050565b6000602082840312156103985761039761017d565b5b600082013567ffffffffffffffff8111156103b6576103b5610182565b5b6103c2848285016102f8565b91505092915050565b600081519050919050565b600081905092915050565b60005b838110156103ff5780820151818401526020810190506103e4565b60008484015250505050565b6000610416826103cb565b61042081856103d6565b93506104308185602086016103e1565b80840191505092915050565b6000610448828461040b565b91508190509291505056fea26469706673582212200dadd82ea4112633ebc1f220af46d5a71197e63c7459a26c496b00b33124f5ea64736f6c63430008100033",
    chainId: 1337,
  };
  const sentTxResponse = await wallet.sendTransaction(tx);
  await sentTxResponse.wait();
  console.log(sentTxResponse); */

  const currentFavoriteNumber = await contract.retrieve();
  console.log(currentFavoriteNumber.toString());
  const transactionResponse = await contract.store(7);
  await transactionResponse.wait();
  updatedFavoriteNumber = await contract.retrieve();
  console.log(updatedFavoriteNumber.toString());
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
